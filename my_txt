Summary
- Front End, Back End
- Multi Page Application (MPA) & Single Page Application (SPA)
- React, Angular, VueJS
- React create-react-app `npx create-react-app application-name`
- JSX JavaScript in html syntax
- Import React from 'react'
- `npm run start` - Start your application
- `npm run built` - Bulid your application (Compile)(To deploy on other server)
- `npm rum test`  - Test your application
- `npm run eject` - Giving you back the control configuration of react application

Recap
- Node Package Manager (npm)
    - Copy Paste Function
    - Create JS file
    - Install function as depencies `npm install awesome-function`
- create-react-app 
    - create default configuration and entry files
- JavaScript XML (JSX)
    - write HTML with JavaScript

Components
- Class Component (Smart Component)
    `class` component-name `extends` parent-component-name
    render (){
        return <></>
    }
- Functional Component Dumb Component
    `function returning JSX <></>
- React only recognizes components that starts with a captial lettr, AppBar (Pascal Case) , AppLogo
- JavaScript Function that handles rendering of a piece of user interface to the browser

-  div ClassName = AppBar
    img src << app logo.JS
    a home    < Navigation.JS < Navitagiton path"" name"" icon"" props
    a Mylist  < Navigation.JS
    a Movies  < Navigation.JS
    a Drama   < Navigation.JS
    button /button
   /div 

Props (this is read-only)
   funtiions (props)
   constructor (prop){
       path "aa",
   }

STATE
- State can be changed over time
- Props are read-only (pass down from parent to child)
- Class Component extends Component {
    state = {
        clock: '12:30'
        counter: 0
    }

    Alternatively
    constructor(){
        super();
        prop.value = '123' // react does not allow this. props is readonly
        this.state = {
            clock: '12:30'
        }
    }

    this.setState({
        clock: '12:35'
    });

    this.setState((state) => {
        counter: state.counter +1
    });
}

Mounting // attaching a component to a browser 
 - constructor()


[1, 2, 3, 4, 5].map((value) => value*value)
1. Create a new git hub repo
2. Link local repository with Gitghub
    git remove add
    git branch -M main
    git push -u origin main
3. git add files .. (stage files)
4. git commit -m "commit message"
---
5. git push


Recap 
 - Props (Property) - read-only
 - State - changeable
    class Acomponent extends Component {
        constructor(){
            super();
            this.state = {
                list: [].
                username: '',
                isLoggedIn: true
            }
        }

        state = {
        }

        this.state.list = something // React does not allow us to change state value via assingment operation.

        You need to use

    const newList = this.state.list;
    newList.push(value;)

    // Async process
        this.setState({
            isLoggedIn: true,
            list: newList
        });

        this.setState((state)=> {
            isLoggedIn: true,
            list:[...state, new value] // create new list from previous state
        })
    }


React Life Cycle

// Mount -- ONLY RUN ONCE
    Constructor() -> render () -> componentDidMount()

// Rendering/Updating -- Triggered when changes props/state
    Component being re-rendered/ re-paint in the browser when there's change in the component props/state

// Unmount
    Clean up any running processes for your component
    Remove any subscription API that you have
    Remove any setInterval


Event Handling

function updateUserName(){
    // updateUserName
}

<input type="text" name="username" onChange="updateUserName()"/>

class A extends Component {

    function updateUserName = () => {
        // inherit the scope of this
        this.setState();
    }

    render(){
        return <input type="text" name="username" onChange="updateUserName()"/>;
    }
}


Conditional Rendering
- const greeting = userIsLogged ? <WelcomeUser /> : <WelcomeStranger />;
OR 
- const greeting = userIsLogged ? <WelcomeUser /> : null;

OR 

render(){
    return 
        <div>
        {userIsLogged ? <WelcomeUser /> : <WelcomeStranger />}
        {userIsLogged && <WelcomeUser />}; // if this first condition is true then run this <WelcomUser/> otherwise do nothing
        </div>
}


List Rendering
- Render an array of Components
- For-Loop [<TodoItem />, <TodoItem />, <TodoItem />]

const datasource = [
    {
        id: '',
        todoOtem 'buy'
        done: false
    }.
    {
        id: '',
        todoOtem 'buy'
        done: false
    }.
      
        id: '',
        todoOtem 'buy'
        done: false
    }.

]

datasource.map

TodoList
    -> TodoItem

// KEY

<li>0</li>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>

Add key at highest of point of list
Should be added to the component
Will not passed down as a props
Keys are meant for comparing if anything already exist
Avoid using index as key

// Because since you are using an array, and the index is used as a key, it will still be the same, even if you remove a component in the middle of it.
// Suppose you have an array like this:
// | 1 | 2 | 3 | 4 | Key
// | A | B | C | D | Value
// And I remove the C. the new array will be:
// 1 | 2 | 3 | 4 | Key
// A | B | D | _ | Value
// And since the key from C hasn’t changed, just the content of it (C to D), React won’t think that it was the 3rd position in the array that was removed (because it was just a content change), but rather the 4th, since the key 4 doesn’t exist anymore!
// My best regards, from another fellow with difficulty to understand React!

SRC: https://medium.com/@vraa/why-using-an-index-as-key-in-react-is-probably-a-bad-idea-7543de68b17c

Routing
Router -> BrowserRouter, Memory Router, HashRouter
Link -> Link, NavLink (activeClass)

'/flight'
Switch (which page should I display, engie or decision making component) ->
Route (The actual route/page that we are displaying)

<Router>
    // Link is trigger point
    <Link to ="1">

    // Decision making
    <Switch>
        // Page to be shown or tied to a Link
        <Route></Route>
    </Switch>
</Router>

withRouter() injects route related info into your component properties.

5 Keys Concepts to understand React
1. JSX (JavaScript XML)
2. Component, Dumb and Smark || Functional vs Class & Props (read-only)
3. State, Lifecycle (Mounting, Updating, Unmount)
4. Conditional and List Rendering
5. Sharing data between Components 

ReactNative -> mobile application interface (communication point is different)
React -> Web Application (HTTP Protocols API endpoint)

react-router-dom is used to handle the naviation within our component
Router- container to your routes
Link - trigger point for your naviation
Switch - decision making on which route to display
Route - actual route/page to be displayed

'Prop Drilling'
- Lift/Move  the common state data that is shareable to a common parent components and we pass the data into child as properties 

Services
- Communation or integration to 3rd party application or endpoints
- Business logic

High Order Component
- a compoenet that contain reusable logic across multiple Components

Context API
- A new concept provide by Reactr at version 16.8

State Managemnet Library (Redux)


// Asynchonous process are usually place or written
state = {
    address: ''
}

componentDidMount(){
    // you perform async process or data fetching
}

componentDidUpdate(){
    // auto save form
    // send updated form values to database
}

function updateAddress(address){
    this.setState({
        address: address
    })
}

<input type="text" onChange={updateAddress}>

Naming convention
- on + past tense
- onChanged
- handleChanged

CSS Methodology
- Block, Element, Modified (BEM)

Block element normal CSS selector to indicate a block
Element __

// Card Component
<div class="card card--selected"> // Block
    <div class="card_header> // Header
        <img class="card_banner" src="lizard.jpg" />
    </div>

    <div class="card_body">
        <p class="card_title">Lizard</p>
        <p class="card__description">Description</p>
    </div>

    <div class="card_footer">
        <button class="card_button card__button--clicked">Share</button>
        <button class="card_button">Learn More</button>
    </div>
</div>



CSS Preprocessor
- SASS
- npm install node-sass@4.14.1
- You can c onvert .css into .scss and start using SCSS

// #1 Ability to declare variables for reusable
$primary-color: blue;

// #2 Ability to nest your selectors
.btn {
    color: $primary-color;
    &:hover{
    }

    label { // .btn label
        @include font-styling(14px, blue);
    }

    + .btn{ // .btn + .btn
    }

    .btn-primary { // .btn .btn-primary
    }

    &.btn-primary { // .btn.btn-primary
    }
}

// #3 import different sass files
    @import "variable"

// #4 Mixin (function)
    @mixin font-styling($font-size, $font-color, $font-family: 'Times News Roman'){
        font-family: $font-family;
        font-size: $font-size;
        color: $font-family;
    }

    level: 2
    width: 200
    @mixin Zoom($width, $height, $level){
        width: calc($width * $level);
    }

// componentName.module.[css|scss|sass];

Ways to test your app
- Unit Testing          (Test a single component without caring of other components)
- Smoke Testing         (Test the bare minimum funcitonality on your application)
- Integration Testing   (Test the integration between your application and other application)
- Regression Testting   (A combination of all unit testing that one component update does not break other components)

@testing Libraby/react
// jest, is the test runner/framework built into CRA
// create test specification 
    it(should render the text of login within the button, () =? {
        render(<LoginButton/>);
        screen.getByText('Login') // Searching for HTML by the text login
    expect(loginButton).toBeDefined();
})
// npm run test









