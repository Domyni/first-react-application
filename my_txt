Summary
- Front End, Back End
- Multi Page Application (MPA) & Single Page Application (SPA)
- React, Angular, VueJS
- React create-react-app `npx create-react-app application-name`
- JSX JavaScript in html syntax
- Import React from 'react'
- `npm run start` - Start your application
- `npm run built` - Bulid your application (Compile)(To deploy on other server)
- `npm rum test`  - Test your application
- `npm run eject` - Giving you back the control configuration of react application

// Class keyword with component named "Netflix" here as smart component
// Netflix child to take in a lot of functions (extends) from Coponent, Must extend from Component provided by `react` library.
// Render is a method to paint / show on your application

IMPORT
// Alwasy import react to indicate to compiler
// All import require extension EXCEPT .js extension.

// . current folder
// .. one hierarcy up folder

Recap
- Node Package Manager (npm)
    - Copy Paste Function
    - Create JS file
    - Install function as depencies `npm install awesome-function`
- create-react-app 
    - create default configuration and entry files
- JavaScript XML (JSX)
    - write HTML with JavaScript

Components
- Class Component (Smart Component)
    `class` component-name `extends` parent-component-name
    render (){
        return <></>
    }
- Functional Component Dumb Component
    `function returning JSX <></>
- React only recognizes components that starts with a captial lettr, AppBar (Pascal Case) , AppLogo
- JavaScript Function that handles rendering of a piece of user interface to the browser

-  div ClassName = AppBar
    img src << app logo.JS
    a home    < Navigation.JS < Navitagiton path"" name"" icon"" props
    a Mylist  < Navigation.JS
    a Movies  < Navigation.JS
    a Drama   < Navigation.JS
    button /button
   /div 

Props (this is read-only)
   funtiions (props)
   constructor (prop){
       path "aa",
   }

STATE
- State can be changed over time
- Props are read-only (pass down from parent to child)
- Class Component extends Component {
    state = {
        clock: '12:30'
        counter: 0
    }

    Alternatively
    constructor(){
        super();
        prop.value = '123' // react does not allow this. props is readonly
        this.state = {
            clock: '12:30'
        }
    }

    this.setState({
        clock: '12:35'
    });

    this.setState((state) => {
        counter: state.counter +1
    });
}

Mounting // attaching a component to a browser 
 - constructor()


[1, 2, 3, 4, 5].map((value) => value*value)
1. Create a new git hub repo
2. Link local repository with Gitghub
    git remove add
    git branch -M main
    git push -u origin main
3. git add files .. (stage files)
4. git commit -m "commit message"
---
5. git push


Recap 
 - Props (Property) - read-only
 - State - changeable
    class Acomponent extends Component {
        constructor(){
            super();
            this.state = {
                list: [].
                username: '',
                isLoggedIn: true
            }
        }

        state = {
        }

        this.state.list = something // React does not allow us to change state value via assingment operation.

        You need to use

    const newList = this.state.list;
    newList.push(value;)

    // Async process
        this.setState({
            isLoggedIn: true,
            list: newList
        });

        this.setState((state)=> {
            isLoggedIn: true,
            list:[...state, new value] // create new list from previous state
        })
    }


React Life Cycle

// Mount -- ONLY RUN ONCE
    Constructor() -> render () -> componentDidMount()

// Rendering/Updating -- Triggered when changes props/state
    Component being re-rendered/ re-paint in the browser when there's change in the component props/state

// Unmount
    Clean up any running processes for your component
    Remove any subscription API that you have
    Remove any setInterval


Event Handling

function updateUserName(){
    // updateUserName
}

<input type="text" name="username" onChange="updateUserName()"/>

class A extends Component {

    function updateUserName = () => {
        // inherit the scope of this
        this.setState();
    }

    render(){
        return <input type="text" name="username" onChange="updateUserName()"/>;
    }
}


Conditional Rendering
- const greeting = userIsLogged ? <WelcomeUser /> : <WelcomeStranger />;
OR 
- const greeting = userIsLogged ? <WelcomeUser /> : null;

OR 

render(){
    return 
        <div>
        {userIsLogged ? <WelcomeUser /> : <WelcomeStranger />}
        {userIsLogged && <WelcomeUser />}; // if this first condition is true then run this <WelcomUser/> otherwise do nothing
        </div>
}


List Rendering
- Render an array of Components
- For-Loop [<TodoItem />, <TodoItem />, <TodoItem />]

const datasource = [
    {
        id: '',
        todoOtem 'buy'
        done: false
    }.
    {
        id: '',
        todoOtem 'buy'
        done: false
    }.
      
        id: '',
        todoOtem 'buy'
        done: false
    }.

]

datasource.map

TodoList
    -> TodoItem

// KEY

<li>0</li>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>

Add key at highest of point of list
Should be added to the component
Will not passed down as a props
Keys are meant for comparing if anything already exist
Avoid using index as key

// Because since you are using an array, and the index is used as a key, it will still be the same, even if you remove a component in the middle of it.
// Suppose you have an array like this:
// | 1 | 2 | 3 | 4 | Key
// | A | B | C | D | Value
// And I remove the C. the new array will be:
// 1 | 2 | 3 | 4 | Key
// A | B | D | _ | Value
// And since the key from C hasn’t changed, just the content of it (C to D), React won’t think that it was the 3rd position in the array that was removed (because it was just a content change), but rather the 4th, since the key 4 doesn’t exist anymore!
// My best regards, from another fellow with difficulty to understand React!

SRC: https://medium.com/@vraa/why-using-an-index-as-key-in-react-is-probably-a-bad-idea-7543de68b17c

Routing
Router -> BrowserRouter, Memory Router, HashRouter
Link -> Link, NavLink (activeClass)

'/flight'
Switch (which page should I display, engie or decision making component) ->
Route (The actual route/page that we are displaying)

<Router>
    // Link is trigger point
    <Link to ="1">

    // Decision making
    <Switch>
        // Page to be shown or tied to a Link
        <Route></Route>
    </Switch>
</Router>

withRouter() injects route related info into your component properties.

5 Keys Concepts to understand React
1. JSX (JavaScript XML)
2. Component, Dumb and Smart || Functional vs Class & Props (read-only)
    - Function that represents a certain section on your web application user interfaces
    - Class (Smart) and Functional (Dumb)
    - Class, extends, contructor OOP
    - Class supports state out of the box
    - V16.8 you can use state in Functional component
    - Hook as a function to tap into state and life cycle method
    - Static data to be displayed onto the compoenet
    - JavaScript is a Fucntional Programming
    - ErrorBoundary no choice but to use class()

3. State, Lifecycle (Mounting, Updating, Unmount)
    - update data within the component
    - mount
        - initialiaztion phase of a React Component
    - render
        - outputting the HTML to the DOM tree
    - umonunt
        -removing the HTML from DOM tree and cleaning up any unwanted or ongoing processes

4. Conditional and List Rendering
    - use JavaScript operators to hide or show component based on conditions
    - rendering an array of components
    - <List> < Component key={unique value amongst its sibling} />

5. Sharing data between Components 
    - Prop drilling - drilling your property down into children
    - Context API
    - Redux 3rd party library 
    - HOC component that allows you to share implementation / logic between your components

ReactNative -> mobile application interface (communication point is different)
React -> Web Application (HTTP Protocols API endpoint)

react-router-dom is used to handle the naviation within our component
Router- container to your routes
Link - trigger point for your naviation
Switch - decision making on which route to display
Route - actual route/page to be displayed

'Prop Drilling'
- Lift/Move  the common state data that is shareable to a common parent components and we pass the data into child as properties 

Services
- Communation or integration to 3rd party application or endpoints
- Business logic

High Order Component
- a compoenet that contain reusable logic across multiple Components

Context API
- A new concept provide by Reactr at version 16.8

State Managemnet Library (Redux)


// Asynchonous process are usually place or written
state = {
    address: ''
}

componentDidMount(){
    // you perform async process or data fetching
}

componentDidUpdate(){
    // auto save form
    // send updated form values to database
}

function updateAddress(address){
    this.setState({
        address: address
    })
}

<input type="text" onChange={updateAddress}>

Naming convention
- on + past tense
- onChanged
- handleChanged

CSS Methodology
- Block, Element, Modified (BEM)

Block element normal CSS selector to indicate a block
Element __

// Card Component
<div class="card card--selected"> // Block
    <div class="card_header> // Header
        <img class="card_banner" src="lizard.jpg" />
    </div>

    <div class="card_body">
        <p class="card_title">Lizard</p>
        <p class="card__description">Description</p>
    </div>

    <div class="card_footer">
        <button class="card_button card__button--clicked">Share</button>
        <button class="card_button">Learn More</button>
    </div>
</div>



CSS Preprocessor
- SASS
- npm install node-sass@4.14.1
- You can c onvert .css into .scss and start using SCSS

// #1 Ability to declare variables for reusable
$primary-color: blue;
$default-font-sizes;

// #2 Ability to nest your selectors
.btn {
    color: $primary-color;
    &:hover{
    }

    label { // .btn label
        @include font-styling(14px, blue);
    }

    + .btn{ // .btn + .btn
    }

    .btn-primary { // .btn .btn-primary
    }

    &.btn-primary { // .btn.btn-primary
    }
}

// #3 import different sass files
    @import "variable"

// variable.scss 
// button.scss
// image.scss 
// index.scss << contain all above import.

// #4 Mixin (function)
    @mixin font-styling($font-size, $font-color, $font-family: 'Times News Roman'){
        font-family: $font-family;
        font-size: $font-size;
        color: $font-family;
    }

    level: 2
    width: 200
    @mixin Zoom($width, $height, $level){
        width: calc($width * $level);
    }

// componentName.module.[css|scss|sass];

Ways to test your app
- Unit Testing          (Test a single component without caring of other components)
- Smoke Testing         (Test the bare minimum funcitonality on your application)
- Integration Testing   (Test the integration between your application and other application)
- Regression Testting   (A combination of all unit testing that one component update does not break other components)

@testing Libraby/react
// jest, is the test runner/framework built into CRA
// create test specification 
    it(should render the text of login within the button, () =? {
        render(<LoginButton/>);
        screen.getByText('Login') // Searching for HTML by the text login
    expect(loginButton).toBeDefined();
})

assertion = expect something to behave something

Modern React Concepts
Hooks (introduce in React 16.8+)
- A function provided by react Library
- function that allows developer to "hook" into react feature on functional component
    - useState:
        allow manage state data within a functional component
    - useEffect:
        hook into lifecycle methods such as `componentDidmount, componentDidUpdate, componentWillUnmount`

- Ability to separate state manipulation into smaller/individual division

Hooks is a function proided by react to allow us to hook into React features such as state and Lifecycle method
in a function component.

- Higher Order Component feature provided to reuse or share logic/implementation across different component.
- class binding this scoping

// Hook syntax for useState
import Reaect, {useState} from 'react';
function Clock () {
    state = {
        datetime: new Date();
    }

    // Array destructuring
    // x, setX
    const [time, setTime] = useState (any data type); // returning an array with a pair of values [time, setTime].

    const timeState = useState (any data type);
    const time = useState (any data type);
    const setTime = useState (any data type);
}

// Hook syntax for useEffect, an effect is an output or something that is produced by your component
// side-effect of your component
// fetching data from an API
// Changing the DOM tree

const [list, SetList] = useState([]);

// componentDidMount(), componentDidUpdate()
useEffect( ()=> {
    window.fetch().then(listValues) =>{
        SetList(listValues):
    }
})

- use Hooks on functional component (not class or simple functional)
- use Hooks only on top-level with the function
- use Hooks within other Hooks

// setUser is an updatae function
cost [user, setUser] = useState({
    name,

    gender
})
setUser({
    name
});

useEffect()
- tap/hook into React Lifecycle method
function sideEffect(){
    // perfomr some side effect to your app/func
}

const depencies = [];
useEffect(sudfeEffect[, dependencies]);


Context API
- meant for sharing data across multiple components instead of 'Props Drilling' 
- create "Provider" to provide value to your "Consumer"

to create a context

const user = {
    usernme: 'john'
}

const UserContext = React.createContext();
<UserContext.Provider valuie={user}>
    const contextValue = useContext(Context);
</Context.Provider>

window local storage = permanet storage until explicitly delete
window session storage = data is removed after closing the sesesons

Deploy your app,
1. create home page key value on package.json using the format

https//username.github.in/application-name

2. Install npm install gh-pages --save-dev
3. npm run xyz
    prexyz -> xyz -> postxyz

ErrrorBoundary
- Graceful way of hanning a synchonous error in React Component
- Any error that is not within a async process or function call back
- Async process 
    - setTImeout
    - setInterval  
    - window.fetch
    - async func abc(){}
    - promise
- call back function
    - Event handler
- Allo multiple error boundary within a component

- Persist/ Save data across page refresh (browser not React)
    - localStorage (data stored permanently unless removed explicitly user)
    - setssionStorage (data are lost the moment user cloases your application tabon the browser)

- Deploying React Application
    - `npm run bild` >> produces a bundle that has been optimised
    - GitHub Pages




Netflix API
: https://api.themoviedb.org/3/discover/tv?api_key=bae0d6e59a93e166f73ccf08386c4416&with_networks=213

const API_BASE_URL = 'https://api.themoviedb.org/3';
const NETFLIX_NETWORK_ID = '213';
const POSTER_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/original';


The to prop with an object

The to prop can be either a string or an object. The object can contain the following properties:
• pathname: The path to navigate to
• search: The query parameters to the path, represented as a string value
• hash: a hash string to add to the URL
• state: an object containing state information that the rendered component can consume

Using these parameters, let's add a <Link> component:

<Link
to={{
pathname:'/user',
search:'?id=1',
hash:'#hash',
state: { isAdmin:true }
    }}>
    User
</Link>
The preceding code translates to the following:

<a href="/user?id=1#hash">User</a>
The state information is not included in the URL path; however, it's available to the component that gets rendered as a result of a <Route> match:

<Route
path="/user"
render={({ location }) => {
const { pathname, search, hash, state } = location;
return (
<div>
Inside User route
<h5>Pathname: {pathname}</h5>
<h5>Search: {search}</h5>
<h5>Hash: {hash}</h5>
<h5>State: {'{'}
{Object.keys(state).map((element, index) => {
return (
<spankey={index}>
{element}: {state[element].toString()}
</span>
)
})}
{'}'}
</h5>
</div>
);
}}
/>

The location object contains all of the previously defined parameters, including the state object.

The state object can be used to store data as the user navigates through the application and provide this data to the component that gets rendered next as a result of <Route> match.


/ PLEASE IGNORE BELOW
// import ShoppingCart from '../ShoppingCart/ShoppingCart'
// import PosterList from '../PosterList/PosterList';
// import Filter from '../Filter/Filter';
    // State
    // filter: ''

    // componentDidMount(){
    //     setTimeout(() => {
    //         this.setState({
    //             showClock: false,
    //         });
    //     }, 5000);
    // }

    // filter = (value) => {
    //     this.setState({
    //         filter: value,
    //     });
    // };


    //     <ShoppingCart/>
    //      {this.state.username !== null && (
    //     <p className="greeting"> Greetings! {this.state.username}</p>
    //      )}
    //     {[1, 2, 3, 4, 5].map((value) =>
    //         <li>{value}</li>
    //     )}
    // <PosterList title="Trending Now"/>
    // <Filter/>

    // filter = (value) => {
    //     // console.log(value);
    //     this.setState({
    //         filter: value
    //     });
    // };


    // showClock: true,
    // {this.state.showClock && <Clock/>}

    // {this.state.username !== null && (
    //     <p className="greeting"> Greetings! {this.state.username}</p>
    //     )}


GitHub Pages#
Note: this feature is available with react-scripts@0.2.0 and higher.

Step 1: Add homepage to package.json#
The step below is important!

If you skip it, your app will not deploy correctly.

Open your package.json and add a homepage field for your project:

  "homepage": "https://myusername.github.io/my-app",
or for a GitHub user page:

  "homepage": "https://myusername.github.io",
or for a custom domain page:

  "homepage": "https://mywebsite.com",
Create React App uses the homepage field to determine the root URL in the built HTML file.

Step 2: Install gh-pages and add deploy to scripts in package.json#
Now, whenever you run npm run build, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.

To publish it at https://myusername.github.io/my-app, run:

npm install --save gh-pages
Alternatively you may use yarn:

yarn add gh-pages
Add the following scripts in your package.json:

  "scripts": {
+   "predeploy": "npm run build",
+   "deploy": "gh-pages -d build",
    "start": "react-scripts start",
    "build": "react-scripts build",
The predeploy script will run automatically before deploy is run.

If you are deploying to a GitHub user page instead of a project page you'll need to make one additional modification:

Tweak your package.json scripts to push deployments to master:
  "scripts": {
    "predeploy": "npm run build",
-   "deploy": "gh-pages -d build",
+   "deploy": "gh-pages -b master -d build",
Step 3: Deploy the site by running npm run deploy#
Then run:

npm run deploy
Step 4: For a project page, ensure your project’s settings use gh-pages#
Finally, make sure GitHub Pages option in your GitHub project settings is set to use the gh-pages branch:

gh-pages branch setting
Step 5: Optionally, configure the domain#
You can configure a custom domain with GitHub Pages by adding a CNAME file to the public/ folder.

Your CNAME file should look like this:

mywebsite.com
Notes on client-side routing#
GitHub Pages doesn’t support routers that use the HTML5 pushState history API under the hood (for example, React Router using browserHistory). This is because when there is a fresh page load for a url like http://user.github.io/todomvc/todos/42, where /todos/42 is a frontend route, the GitHub Pages server returns 404 because it knows nothing of /todos/42. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:

You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to hashHistory for this effect, but the URL will be longer and more verbose (for example, http://user.github.io/todomvc/#/todos/42?_k=yknaj). Read more about different history implementations in React Router.
Alternatively, you can use a trick to teach GitHub Pages to handle 404s by redirecting to your index.html page with a custom redirect parameter. You would need to add a 404.html file with the redirection code to the build folder before deploying your project, and you’ll need to add code handling the redirect parameter to index.html. You can find a detailed explanation of this technique in this guide.
Troubleshooting#
"/dev/tty: No such a device or address"#
If, when deploying, you get /dev/tty: No such a device or address or a similar error, try the following:

Create a new Personal Access Token
git remote set-url origin https://<user>:<token>@github.com/<user>/<repo> .
Try npm run deploy again
"Cannot read property 'email' of null"#
If, when deploying, you get Cannot read property 'email' of null, try the following:

git config --global user.name '<your_name>'
git config --global user.email '<your_email>'
Try npm run deploy again